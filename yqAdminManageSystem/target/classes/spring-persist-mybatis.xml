<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>

    <!--    配置自动扫描的包，主要是业务逻辑层的Service扫描到ioc容器中中-->
    <context:component-scan base-package="com.web.service"></context:component-scan>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="password" value="${jdbc.password}"></property>
        <property name="username" value="${jdbc.user}"></property>
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
<!--        扫描mybatis的配置文件-->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>

<!--        扫描Mapper所在位置-->
        <property name="mapperLocations" value="classpath:mapper/*Mapper.xml"></property>

<!--        配置数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--    扫描接口所在的包-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.web.mapper"></property>
    </bean>

<!--    配置事务管理器-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
<!--装配数据源-->
        <property name="dataSource" ref="dataSource"></property>
    </bean>

<!--    配置事务切面-->
    <aop:config>
<!--        配置切入点-->
        <aop:pointcut id="txPoint" expression="execution(* *..*ServiceImpl.*(..))"/>
<!--        将切入点和事务管理器关联起来-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"></aop:advisor>
    </aop:config>
<!--    配置事物的通知-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
<!--       配置事务的属性-->
        <tx:attributes>
<!--            将一些查询方法设置为只读，不用进行事务的加持-->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"></tx:method>
            <tx:method name="query*" read-only="true"></tx:method>
            <tx:method name="count*" read-only="true"></tx:method>

        <!--            查询写方法 配置事务的传播行为，回滚异常-->
        <!--            propagation属性：
                        默认值：REQUIRED 表示当前方法必须工作在事务中，如果当前线程没有事务就自己开启事务，否则使用当前线程的已有的事务
                            有别人的事务可能会被错误的回滚，本身没有异常
                        REQUIRES_NEW : 必须有事务而且必须是自己新开的事务
                            不会受到其他事务回滚的影响
        -->
        <!--           rollback-for 配置事务的方法针对什么样的异常回滚
                        默认是运行时异常回滚
                        建议是运行时异常和编译时异常都回滚-->
        <!--            在基于xml的声明式事务中，事务的属性tx:method是必须配置的，如果方法没有对应的tx:method，那么事务对这个方法是不生效的-->
        <tx:method name="save*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
        <tx:method name="update*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
        <tx:method name="remove*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
        <tx:method name="batch" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
    </tx:attributes>

    </tx:advice>



</beans>